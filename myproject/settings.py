"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os.path

from pathlib import Path
import environ
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['influencerhiring.com',
                 '102.223.184.74', 'www.influencerhiring.com', '127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'captcha',
    'djangocms_admin_style',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'social_django',
    'sslserver',
    'mainapp',
    'Creator',
    'Account',
    'Agency',
    'Client',
    'Payment',
    'marketingapp',
    'rest_framework',
    'Razor',
    'paypalapp',
    'zoomeet',
    'paypal.standard.ipn',
    'durationfield',
    'Admin',
    'emil_send',
    'RM',
    'Manager',
    'affiliates',
    'agora_chat',
    'pdf_validation_app',
    'channels',
    'django_countries',
    'corsheaders',
    'pushnotificationapp',
    'inappnotifications',
    'whatsapp_login',



]

AUTH_USER_MODEL = 'mainapp.Allusers'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if not DEBUG:
    SECURE_SSL_REDIRECT = True

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'myproject.csp_middleware.CSPMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # agora_chat.middleware.UpdateLastActivityMiddleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'mainapp.middleware.RequestThrottleMiddleware',
    'mainapp.middleware.RedirectToWWWMiddleware',
    'mainapp.middle.URLHitMiddleware',
    'myproject.hsts_middleware.HSTSMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'RM.middleware.ActiveUserMiddleware',

    # 'mainapp.middleware.RequestLimitMiddleware',
]
SESSION_COOKIE_SECURE = True  # Set to False if not using HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True


ROOT_URLCONF = 'myproject.urls'


ENCRYPT_KEY = b'tmzHcYuvLUhxjcxZ4k_iqfCx-HUq6PCvdbXr4vOC5B4='

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# WSGI_APPLICATION = 'myproject.wsgi.application'
ASGI_APPLICATION = 'myproject.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env("DATABASE_NAME"),
        'USER': env("DATABASE_USER"),
        'PASSWORD': env("DATABASE_PASSWORD"),
        'HOST': env("DATABASE_HOST"),
        'PORT': env("DATABASE_PORT"),
        'OPTIONS': {             
            'client_encoding': 'UTF8',         
        },
    }
}

# WKHTMLTOPDF_CMD = 'C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Email Configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'admin@influencerhiring.com'
EMAIL_HOST_PASSWORD = 'ppqsovzntfiftaek'
EMAIL_USE_TLS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = 'mainapp/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'mainapp/static/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# X_FRAME_OPTIONS = 'ALLOW-FROM *'

X_FRAME_OPTIONS = 'ALLOW-FROM https://www.influencerhiring.com'


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
        # 'CONFIG': {
        #     'hosts': [('102.223.184.74', 7500)],
        # }
    }
}

CORS_ALLOWED_ORIGINS = ['https://www.influencerhiring.com',
                        'https://www.influencerhiring.com']


CSRF_TRUSTED_ORIGINS = ['https://102.223.184.74:80/',
                        'https://102.223.184.74:87/', 'https://www.influencerhiring.com', 'https://102.223.184.74:443/']

CORS_ORIGIN_ALLOW_ALL = False


RECAPTCHA_PUBLIC_KEY = env("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY")

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.instagram.InstagramOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

LOGIN_URL = 'login'
# LOGIN_REDIRECT_URL = 'home'
LOGIN_REDIRECT_URL = 'Select_Account'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = 'login'


SOCIAL_AUTH_FACEBOOK_KEY = env("SOCIAL_AUTH_FACEBOOK_KEY")         # App ID
SOCIAL_AUTH_FACEBOOK_SECRET = env("SOCIAL_AUTH_FACEBOOK_SECRET")  # App Secret
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env(
    "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")        # App ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env(
    "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")  # App Secret

SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [                 # add this
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
]


# django_celery/settings.py
# ...
# Celery settings
CELERY_BROKER_URL = 'pyamqp://guest@localhost//'#"redis://localhost:6379"
CELERY_RESULT_BACKEND = 'rpc://'#"redis://localhost:6379"
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE


# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         # "OPTIONS": {
#         #      "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         # }
#     }
# }


# paypal settings
PAYPAL_TEST = False

STRIPE_PUBLIC_KEY = 'pk_live_51MZ69BSEqjetbOctzEJCbXdu63iFQGlF3cQiNRpNMnLvlIj93QWzz6QjO6GYucIbsp4b1xGKjfH33jscYIFSn3KD00SrlrQRaa'
STRIPE_PRIVATE_KEY = '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'
STRIPE_ENDPOINT_SECRET = 'we_1Mm9QXSEqjetbOctLVgvB6Vl'

# client = razorpay.Client(auth=((''), ('')))

RAZORPAY_KEY_ID = 'rzp_test_kJkULiGl7o3U1U'
RAZORPAY_KEY_SECRET = 'ZexUfR9RUMzVl88bCWs081fX'


# The maximum number of requests allowed within the duration
REQUEST_THROTTLE_LIMIT = 101

# The duration of the throttle in seconds
REQUEST_THROTTLE_DURATION = 60


# SESSION_ENGINE = 'django.contrib.sessions.backends.db'

SESSION_COOKIE_AGE = 86400
# SESSION_COOKIE_AGE = 120

SESSION_EXPIRE_AT_BROWSER_CLOSE = True


SESSION_COOKIE_NAME = 'my_session'

# set the session engine to use the database backend
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# set the session cookie age for the session key used in database backend
SESSION_SAVE_EVERY_REQUEST = True


# For Reset Password Timeout
PASSWORD_RESET_TIMEOUT = 86400



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    }
}


## FIREBASE CONFIGURATION  #########

# import firebase_admin
# from firebase_admin import credentials

# cred = credentials.Certificate('path/to/your/serviceAccountKey.json')
# firebase_admin.initialize_app(cred)
